require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe OrderLinesController do

  # This should return the minimal set of attributes required to create a valid
  # OrderLine. As you add validations to OrderLine, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrderLinesController. Be sure to keep this updated too.
  let(:current_cart) { FactoryGirl.create(:cart) }
  let(:book) { FactoryGirl.create(:book) }
  let(:valid_session) { {:cart_id => current_cart.id} }

  describe "GET index" do
    it "assigns all order_lines as @order_lines" do
      order_line = current_cart.add_book(book.id)
      order_line.save
      get :index, {}, valid_session
      assigns(:order_lines).should eq([order_line])
    end
  end

  describe "GET new" do
    it "assigns a new order_line as @order_line" do
      get :new, {}, valid_session
      assigns(:order_line).should be_a_new(OrderLine)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new OrderLine" do
        expect {
          post :create, {:book_id => book.id}, valid_session
        }.to change(OrderLine, :count).by(1)
      end

      it "adds quantity to the OrderLine" do 
        post :create, {:book_id => book.id}, valid_session
        post :create, {:book_id => book.id}, valid_session
        expect(OrderLine.count).to eq(1)
        expect(OrderLine.first.quantity).to eq(2)
      end

      it "assigns a newly created order_line as @order_line" do
        post :create, {:book_id => book.id }, valid_session
        assigns(:order_line).should be_a(OrderLine)
        assigns(:order_line).should be_persisted
      end

      it "redirects to the created order_line" do
        post :create, {:book_id => book.id }, valid_session
        response.should redirect_to(store_url)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested order_line" do
      order_line = current_cart.add_book(book.id)
      expect {
        delete :destroy, {:id => order_line.book_id}, valid_session
      }.to change(OrderLine, :count).by(-1)
    end

    it "reduce the requested order_line by one" do 
      order_line = current_cart.add_book(book.id)
      order_line.save
      current_cart.add_book(book.id).save
      current_cart.add_book(book.id).save
      delete :destroy, {:id => order_line.book_id}, valid_session
      expect(OrderLine.first.quantity).to eq(2)
    end

    it "redirects to the order_lines list" do
      order_line = current_cart.add_book(book.id)
      delete :destroy, {:id => order_line.book_id}, valid_session
      response.should redirect_to(store_url)
    end
  end

end
